services:
  #postgres:
  #  image: postgres:15
  #  restart: always
  #  volumes:
  #    - db_data:/var/lib/postgresql/data
  #  environment:
  #    POSTGRES_PASSWORD: ${DB_PWD}
  graphql-engine:
    image: ${REGISTRY_HOST}:${REGISTRY_PORT}/hasura/graphql-engine:latest
    ports:
      - "8080:8080"
    restart: always
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://${DB_HASURA_UID}:${DB_HASURA_PWD}@${DB_IP}:${DB_PORT}/${DB_HASURA_NAME}
      ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
      PG_DATABASE_URL: postgres://${DB_APP_UID}:${DB_APP_PWD}@${DB_IP}:${DB_PORT}/${DB_APP_NAME}
      ## デフォルトのアプリDB
      HASURA_GRAPHQL_DATABASE_URL: postgres://${DB_APP_UID}:${DB_APP_PWD}@${DB_IP}:${DB_PORT}/${DB_APP_NAME}
      ## セキュリティ的に必須
      HASURA_GRAPHQL_ADMIN_SECRET: admin
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      ## uncomment next line to run console offline (i.e load console assets from server instead of CDN)
      # HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: /srv/console-assets
      ## uncomment next line to set an admin secret
      # HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
      HASURA_GRAPHQL_METADATA_DEFAULTS: '{"backend_configs":{"dataconnector":{"athena":{"uri":"http://data-connector-agent:8081/api/v1/athena"},"mariadb":{"uri":"http://data-connector-agent:8081/api/v1/mariadb"},"mysql8":{"uri":"http://data-connector-agent:8081/api/v1/mysql"},"oracle":{"uri":"http://data-connector-agent:8081/api/v1/oracle"},"snowflake":{"uri":"http://data-connector-agent:8081/api/v1/snowflake"}}}}'
      HASURA_GRAPHQL_JWT_SECRET: '{"type": "RS256","jwk_url": "https://${KEYCLOAK_SERVER}:8443/realms/${KEYCLOAK_RELNAME}/protocol/openid-connect/certs"}'
    depends_on:
      data-connector-agent:
        condition: service_healthy
    command: >
      graphql-engine serve
        --server-port 8080

  data-connector-agent:
    image: ${REGISTRY_HOST}:${REGISTRY_PORT}/hasura/graphql-data-connector:latest
    restart: always
    ports:
      - 8081:8081
    environment:
      QUARKUS_LOG_LEVEL: ERROR # FATAL, ERROR, WARN, INFO, DEBUG, TRACE
      ## https://quarkus.io/guides/opentelemetry#configuration-reference
      QUARKUS_OPENTELEMETRY_ENABLED: "false"
      ## QUARKUS_OPENTELEMETRY_TRACER_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/v1/athena/health"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 5s

  webhookd:
    image: ${REGISTRY_HOST}:${REGISTRY_PORT}/ncarlier/webhookd:latest
    restart: always
    ports:
      - "8443:8443"  # HTTPS用ポートに変更
    environment:
      WEBHOOKD_PORT: 8443
      WEBHOOKD_LOG_LEVEL: info
      WHD_TLS_ENABLED: "true"
      WHD_TLS_CERT_FILE: /app/certs/live/${DOMAIN}/fullchain.pem
      WHD_TLS_KEY_FILE: /app/certs/live/${DOMAIN}/privkey.pem
    volumes:
      - /opt/webhookd/config:/app/config  # 設定ファイル（必要に応じて）
      - /opt/letsencrypt:/app/certs:ro  # TLS証明書と鍵を格納
